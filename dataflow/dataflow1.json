{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_datasalary",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_datasalary_copy1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "psalary"
				},
				{
					"name": "csalary"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          date as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(year = year(toTimestamp(date, 'yyyy-MM-dd'))) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(year),",
				"     tot = sum(salary)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          pyear = year,",
				"          ptot = tot",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> psalary",
				"aggregate1 select(mapColumn(",
				"          cyear = year,",
				"          ctot = tot",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> csalary",
				"psalary, csalary join(cyear - pyear == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(Grate = concat(toString(round(((ctot - ptot) / ptot) * 100, 1)),\" %\"),",
				"          Gstat = iif(ctot > ptot , \"Increase\",iif(ctot < ptot , \"Decrease\" , \"No Change\"))) ~> derivedColumn2",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date as string,",
				"          salary as string",
				"     ),",
				"     partitionFileNames:['diff_salary.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}